export default {
    auth: {
        couldNotRegisterUser:
            "Sorry, User could not be registered. Please Try Again.",
        userRegistered: "Your Account has been registered.",
        userAlreadyExists:
            "User with the same email already Exists. Please use a different email.",
        loginSuccessful: "Successfully logged in to the account.",
        loginError: "Could not login into the account. Please Try Again.",
        emailPasswordError:
            "Either Email or password is incorrect. Please Try Again.",

        noTokenFound: "No Token Found in header.",
        noUserFound: "User Is not Found.",
        tokenDidNotMatch: "Token sent did not match.",
        authenticationFailed: "Could not authenticate user.",
        invalidToken: "The token provided is invalid.",
        accessNotGranted: "Access not granted to perform the operation.",
        error: "Something went wrong, Please Try Again.",
        notAdmin: "Sorry, Only Admins can login here.",
        viewProfileError: "Could not view profile, Please Try Again.",
        viewProfileSuccess: "User profile has been displayed",
        couldNotViewUsers:
            "Sorry, Users could not view at the moment. Please Try Again.",
        userViewed: "All the users has been displayed",
        noUser: "No users has been available at the moment. Please contact Admin for new Users.",
        suspensionMessage: "Please provide a suspension message.",
        userSuspensionError:
            "Sorry, User has not been suspended. Please Try Again",
        userSuspendedSuccess: "User has been suspended.",
        alreadySuspendedUser: "This user has already suspended.",
        profileUpdated: "Your profile has been updated successfully.",
        profileNotUpdated:
            "Your profile has not been updated. Please Try Again.",
        maybeSuspended: "Sorry, the user is ether not found or is suspended.",
        passwordChangeError: "Sorry, Your password couldn't be updated.",
        passwordChanged: "Your password has been updated.",
        hashPasswordError: "Couldn't hash the password.",
        passwordDontMatch:
            "Sorry, the password you provided doesn't match with the old password.",
        oldAndNewAreSame:
            "Sorry, The old password and new password can't be same.",
        invalidFile: "Please provide a profile picture to upload.",
        validation: (field: string) => `${field} is required for Registration`,
    },
    unit: {
        unitsFetched: "Units is Fetched.",
        unitsFetchError: "Couldn't fetch the units.",
        unitsAdded: "Units is Added.",
        unitsAddError: "Couldn't Add the unit.",
        unitsDeleted: "Unit is Deleted.",
        unitsDeleteError: "Couldn't delete the unit.",
        unitNotFound: "Unit Not Found.",
        unitsUpdated: "Unit is Updated.",
        unitsUpdateError: "Couldn't delete the unit.",
        validation: (field: string) => `${field} is required for Unit.`,
    },
    category: {
        categoryFetched: "Category is Fetched.",
        categoryFetchError: "Couldn't fetch the Category.",
        categoryAdded: "Category is Added.",
        categoryAddError: "Couldn't Add the Category.",
        categoryDeleted: "Category is Deleted.",
        categoryDeleteError: "Couldn't delete the Category.",
        categoryNotFound: "Category Not Found.",
        categoryUpdated: "Category is Updated.",
        categoryUpdateError: "Couldn't delete the Category.",
        categoryExists:
            "Category with the same name/slug is already available.",
        validation: (field: string) => `${field} is required for Category.`,
    },
    product: {
        productFetched: "Product is Fetched.",
        productFetchError: "Couldn't fetch Products.",
        productAdded: "Product is Added.",
        productAddError: "Couldn't Add the Product.",
        productDeleted: "Product is Deleted.",
        productDeleteError: "Couldn't delete the Product.",
        productNotFound: "Product Not Found.",
        productUpdated: "Product is Deleted.",
        productUpdateError: "Couldn't delete the Product.",
        validation: (field: string) => `${field} is required for Product.`,
    },
    post: {
        postFetched: "Post/s is Fetched.",
        postFetchError: "Couldn't fetch Post/s.",
        postAdded: "Post/s is Added.",
        postAddError: "Couldn't Add the Post/s.",
        postDeleted: "Post/s is Deleted.",
        postDeleteError: "Couldn't delete the Post/s.",
        postNotFound: "Post/s Not Found.",
        postUpdated: "Post/s is Deleted.",
        postUpdateError: "Couldn't delete the Post/s.",
        notAuthorized:
            "Sorry! You are not authorized to perform actions on this post",
        validation: (field: string) => `${field} is required for Post.`,
    },
    bid: {
        bidAdded: "Your bid was placed",
        bidAddError: "Sorry, Your bid couldn't be placed",
        bidEdited: "Your bid was Edited",
        bidEditError: "Sorry, Your bid couldn't be Edited.",
        bidDeleted: "Your bid was Deleted.",
        bidDeleteError: "Sorry, Your bid couldn't be Deleted.",
        bidFetched: "Bid/s was fetched.",
        bidFetchError: "Sorry,bid/s couldn't be Fetched.",
        bidAccepted: "Bid was Accepted.",
        bidAcceptError: "Sorry, bid couldn't be Accepted.",
        bidRejected: "Bid was Rejected.",
        bidRejectedError: "Sorry, bid couldn't be Rejected.",
        bidNotFound: "Sorry, The bid is not on our servers.",
        notAuthorized:
            "Sorry! You are not authorized to perform actions on this bid.",
        validation: (field: string) => `${field} is required for Bidding.`,
    },
};
